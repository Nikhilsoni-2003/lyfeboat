// This file is auto-generated by @hey-api/openapi-ts

import { type Options, v1ActionsBusinessUpdate, v1BusinessAdminListRetrieve, v1BusinessApprovedListRetrieve, v1BusinessDetailsRetrieve, v1BusinessDetailsUpdate, v1BusinessListRetrieve, v1BusinessProfileCreate, v1ConfigAddKeywordsCreate, v1ConfigurationChildrenRetrieve, v1KycAddCreate, v1KycAdminApprovalUpdate, v1KycDetailsRetrieve, v1KycDetailsUpdate, v1LoginIsLoggedInRetrieve, v1LoginLogoutCreate, v1LoginResendOtpCreate, v1LoginSendOtpCreate, v1LoginVerifyOtpCreate, v1MediaPresignedUploadCreate, v1PlansPlansDetailsRetrieve, v1ProfileProfileDetailRetrieve, v1ProfileProfileDetailCreate, v1SearchBusinessSearchRetrieve, v1SearchNearbyRetrieve } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions } from '@tanstack/react-query';
import type { V1ActionsBusinessUpdateData, V1ActionsBusinessUpdateResponse, V1BusinessAdminListRetrieveData, V1BusinessApprovedListRetrieveData, V1BusinessDetailsRetrieveData, V1BusinessDetailsUpdateData, V1BusinessDetailsUpdateResponse, V1BusinessListRetrieveData, V1BusinessProfileCreateData, V1BusinessProfileCreateResponse, V1ConfigAddKeywordsCreateData, V1ConfigAddKeywordsCreateResponse, V1ConfigurationChildrenRetrieveData, V1KycAddCreateData, V1KycAddCreateResponse, V1KycAdminApprovalUpdateData, V1KycAdminApprovalUpdateResponse, V1KycDetailsRetrieveData, V1KycDetailsUpdateData, V1KycDetailsUpdateResponse, V1LoginIsLoggedInRetrieveData, V1LoginLogoutCreateData, V1LoginLogoutCreateResponse, V1LoginResendOtpCreateData, V1LoginResendOtpCreateResponse, V1LoginSendOtpCreateData, V1LoginSendOtpCreateResponse, V1LoginVerifyOtpCreateData, V1LoginVerifyOtpCreateResponse, V1MediaPresignedUploadCreateData, V1MediaPresignedUploadCreateResponse, V1PlansPlansDetailsRetrieveData, V1ProfileProfileDetailRetrieveData, V1ProfileProfileDetailCreateData, V1ProfileProfileDetailCreateResponse, V1SearchBusinessSearchRetrieveData, V1SearchNearbyRetrieveData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export const v1ActionsBusinessUpdateMutation = (options?: Partial<Options<V1ActionsBusinessUpdateData>>): UseMutationOptions<V1ActionsBusinessUpdateResponse, AxiosError<DefaultError>, Options<V1ActionsBusinessUpdateData>> => {
    const mutationOptions: UseMutationOptions<V1ActionsBusinessUpdateResponse, AxiosError<DefaultError>, Options<V1ActionsBusinessUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1ActionsBusinessUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const v1BusinessAdminListRetrieveQueryKey = (options?: Options<V1BusinessAdminListRetrieveData>) => createQueryKey('v1BusinessAdminListRetrieve', options);

export const v1BusinessAdminListRetrieveOptions = (options?: Options<V1BusinessAdminListRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1BusinessAdminListRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1BusinessAdminListRetrieveQueryKey(options)
    });
};

export const v1BusinessApprovedListRetrieveQueryKey = (options?: Options<V1BusinessApprovedListRetrieveData>) => createQueryKey('v1BusinessApprovedListRetrieve', options);

export const v1BusinessApprovedListRetrieveOptions = (options?: Options<V1BusinessApprovedListRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1BusinessApprovedListRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1BusinessApprovedListRetrieveQueryKey(options)
    });
};

export const v1BusinessDetailsRetrieveQueryKey = (options: Options<V1BusinessDetailsRetrieveData>) => createQueryKey('v1BusinessDetailsRetrieve', options);

export const v1BusinessDetailsRetrieveOptions = (options: Options<V1BusinessDetailsRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1BusinessDetailsRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1BusinessDetailsRetrieveQueryKey(options)
    });
};

export const v1BusinessDetailsUpdateMutation = (options?: Partial<Options<V1BusinessDetailsUpdateData>>): UseMutationOptions<V1BusinessDetailsUpdateResponse, AxiosError<DefaultError>, Options<V1BusinessDetailsUpdateData>> => {
    const mutationOptions: UseMutationOptions<V1BusinessDetailsUpdateResponse, AxiosError<DefaultError>, Options<V1BusinessDetailsUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1BusinessDetailsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1BusinessListRetrieveQueryKey = (options?: Options<V1BusinessListRetrieveData>) => createQueryKey('v1BusinessListRetrieve', options);

export const v1BusinessListRetrieveOptions = (options?: Options<V1BusinessListRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1BusinessListRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1BusinessListRetrieveQueryKey(options)
    });
};

export const v1BusinessProfileCreateQueryKey = (options: Options<V1BusinessProfileCreateData>) => createQueryKey('v1BusinessProfileCreate', options);

export const v1BusinessProfileCreateOptions = (options: Options<V1BusinessProfileCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1BusinessProfileCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1BusinessProfileCreateQueryKey(options)
    });
};

export const v1BusinessProfileCreateMutation = (options?: Partial<Options<V1BusinessProfileCreateData>>): UseMutationOptions<V1BusinessProfileCreateResponse, AxiosError<DefaultError>, Options<V1BusinessProfileCreateData>> => {
    const mutationOptions: UseMutationOptions<V1BusinessProfileCreateResponse, AxiosError<DefaultError>, Options<V1BusinessProfileCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1BusinessProfileCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1ConfigAddKeywordsCreateQueryKey = (options: Options<V1ConfigAddKeywordsCreateData>) => createQueryKey('v1ConfigAddKeywordsCreate', options);

export const v1ConfigAddKeywordsCreateOptions = (options: Options<V1ConfigAddKeywordsCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1ConfigAddKeywordsCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1ConfigAddKeywordsCreateQueryKey(options)
    });
};

export const v1ConfigAddKeywordsCreateMutation = (options?: Partial<Options<V1ConfigAddKeywordsCreateData>>): UseMutationOptions<V1ConfigAddKeywordsCreateResponse, AxiosError<DefaultError>, Options<V1ConfigAddKeywordsCreateData>> => {
    const mutationOptions: UseMutationOptions<V1ConfigAddKeywordsCreateResponse, AxiosError<DefaultError>, Options<V1ConfigAddKeywordsCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1ConfigAddKeywordsCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1ConfigurationChildrenRetrieveQueryKey = (options: Options<V1ConfigurationChildrenRetrieveData>) => createQueryKey('v1ConfigurationChildrenRetrieve', options);

/**
 * Retrieve configuration by key.
 */
export const v1ConfigurationChildrenRetrieveOptions = (options: Options<V1ConfigurationChildrenRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1ConfigurationChildrenRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1ConfigurationChildrenRetrieveQueryKey(options)
    });
};

export const v1KycAddCreateQueryKey = (options: Options<V1KycAddCreateData>) => createQueryKey('v1KycAddCreate', options);

export const v1KycAddCreateOptions = (options: Options<V1KycAddCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1KycAddCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1KycAddCreateQueryKey(options)
    });
};

export const v1KycAddCreateMutation = (options?: Partial<Options<V1KycAddCreateData>>): UseMutationOptions<V1KycAddCreateResponse, AxiosError<DefaultError>, Options<V1KycAddCreateData>> => {
    const mutationOptions: UseMutationOptions<V1KycAddCreateResponse, AxiosError<DefaultError>, Options<V1KycAddCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1KycAddCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update KYC data by ID.
 */
export const v1KycAdminApprovalUpdateMutation = (options?: Partial<Options<V1KycAdminApprovalUpdateData>>): UseMutationOptions<V1KycAdminApprovalUpdateResponse, AxiosError<DefaultError>, Options<V1KycAdminApprovalUpdateData>> => {
    const mutationOptions: UseMutationOptions<V1KycAdminApprovalUpdateResponse, AxiosError<DefaultError>, Options<V1KycAdminApprovalUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1KycAdminApprovalUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1KycDetailsRetrieveQueryKey = (options: Options<V1KycDetailsRetrieveData>) => createQueryKey('v1KycDetailsRetrieve', options);

/**
 * Retrieve KYC data by ID.
 */
export const v1KycDetailsRetrieveOptions = (options: Options<V1KycDetailsRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1KycDetailsRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1KycDetailsRetrieveQueryKey(options)
    });
};

/**
 * Update KYC data by ID.
 */
export const v1KycDetailsUpdateMutation = (options?: Partial<Options<V1KycDetailsUpdateData>>): UseMutationOptions<V1KycDetailsUpdateResponse, AxiosError<DefaultError>, Options<V1KycDetailsUpdateData>> => {
    const mutationOptions: UseMutationOptions<V1KycDetailsUpdateResponse, AxiosError<DefaultError>, Options<V1KycDetailsUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1KycDetailsUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1LoginIsLoggedInRetrieveQueryKey = (options?: Options<V1LoginIsLoggedInRetrieveData>) => createQueryKey('v1LoginIsLoggedInRetrieve', options);

export const v1LoginIsLoggedInRetrieveOptions = (options?: Options<V1LoginIsLoggedInRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1LoginIsLoggedInRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1LoginIsLoggedInRetrieveQueryKey(options)
    });
};

export const v1LoginLogoutCreateQueryKey = (options?: Options<V1LoginLogoutCreateData>) => createQueryKey('v1LoginLogoutCreate', options);

export const v1LoginLogoutCreateOptions = (options?: Options<V1LoginLogoutCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1LoginLogoutCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1LoginLogoutCreateQueryKey(options)
    });
};

export const v1LoginLogoutCreateMutation = (options?: Partial<Options<V1LoginLogoutCreateData>>): UseMutationOptions<V1LoginLogoutCreateResponse, AxiosError<DefaultError>, Options<V1LoginLogoutCreateData>> => {
    const mutationOptions: UseMutationOptions<V1LoginLogoutCreateResponse, AxiosError<DefaultError>, Options<V1LoginLogoutCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1LoginLogoutCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1LoginResendOtpCreateQueryKey = (options: Options<V1LoginResendOtpCreateData>) => createQueryKey('v1LoginResendOtpCreate', options);

export const v1LoginResendOtpCreateOptions = (options: Options<V1LoginResendOtpCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1LoginResendOtpCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1LoginResendOtpCreateQueryKey(options)
    });
};

export const v1LoginResendOtpCreateMutation = (options?: Partial<Options<V1LoginResendOtpCreateData>>): UseMutationOptions<V1LoginResendOtpCreateResponse, AxiosError<DefaultError>, Options<V1LoginResendOtpCreateData>> => {
    const mutationOptions: UseMutationOptions<V1LoginResendOtpCreateResponse, AxiosError<DefaultError>, Options<V1LoginResendOtpCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1LoginResendOtpCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1LoginSendOtpCreateQueryKey = (options: Options<V1LoginSendOtpCreateData>) => createQueryKey('v1LoginSendOtpCreate', options);

export const v1LoginSendOtpCreateOptions = (options: Options<V1LoginSendOtpCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1LoginSendOtpCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1LoginSendOtpCreateQueryKey(options)
    });
};

export const v1LoginSendOtpCreateMutation = (options?: Partial<Options<V1LoginSendOtpCreateData>>): UseMutationOptions<V1LoginSendOtpCreateResponse, AxiosError<DefaultError>, Options<V1LoginSendOtpCreateData>> => {
    const mutationOptions: UseMutationOptions<V1LoginSendOtpCreateResponse, AxiosError<DefaultError>, Options<V1LoginSendOtpCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1LoginSendOtpCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1LoginVerifyOtpCreateQueryKey = (options: Options<V1LoginVerifyOtpCreateData>) => createQueryKey('v1LoginVerifyOtpCreate', options);

export const v1LoginVerifyOtpCreateOptions = (options: Options<V1LoginVerifyOtpCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1LoginVerifyOtpCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1LoginVerifyOtpCreateQueryKey(options)
    });
};

export const v1LoginVerifyOtpCreateMutation = (options?: Partial<Options<V1LoginVerifyOtpCreateData>>): UseMutationOptions<V1LoginVerifyOtpCreateResponse, AxiosError<DefaultError>, Options<V1LoginVerifyOtpCreateData>> => {
    const mutationOptions: UseMutationOptions<V1LoginVerifyOtpCreateResponse, AxiosError<DefaultError>, Options<V1LoginVerifyOtpCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1LoginVerifyOtpCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1MediaPresignedUploadCreateQueryKey = (options: Options<V1MediaPresignedUploadCreateData>) => createQueryKey('v1MediaPresignedUploadCreate', options);

export const v1MediaPresignedUploadCreateOptions = (options: Options<V1MediaPresignedUploadCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1MediaPresignedUploadCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1MediaPresignedUploadCreateQueryKey(options)
    });
};

export const v1MediaPresignedUploadCreateMutation = (options?: Partial<Options<V1MediaPresignedUploadCreateData>>): UseMutationOptions<V1MediaPresignedUploadCreateResponse, AxiosError<DefaultError>, Options<V1MediaPresignedUploadCreateData>> => {
    const mutationOptions: UseMutationOptions<V1MediaPresignedUploadCreateResponse, AxiosError<DefaultError>, Options<V1MediaPresignedUploadCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1MediaPresignedUploadCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1PlansPlansDetailsRetrieveQueryKey = (options?: Options<V1PlansPlansDetailsRetrieveData>) => createQueryKey('v1PlansPlansDetailsRetrieve', options);

export const v1PlansPlansDetailsRetrieveOptions = (options?: Options<V1PlansPlansDetailsRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1PlansPlansDetailsRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1PlansPlansDetailsRetrieveQueryKey(options)
    });
};

export const v1ProfileProfileDetailRetrieveQueryKey = (options?: Options<V1ProfileProfileDetailRetrieveData>) => createQueryKey('v1ProfileProfileDetailRetrieve', options);

export const v1ProfileProfileDetailRetrieveOptions = (options?: Options<V1ProfileProfileDetailRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1ProfileProfileDetailRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1ProfileProfileDetailRetrieveQueryKey(options)
    });
};

export const v1ProfileProfileDetailCreateQueryKey = (options: Options<V1ProfileProfileDetailCreateData>) => createQueryKey('v1ProfileProfileDetailCreate', options);

export const v1ProfileProfileDetailCreateOptions = (options: Options<V1ProfileProfileDetailCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1ProfileProfileDetailCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1ProfileProfileDetailCreateQueryKey(options)
    });
};

export const v1ProfileProfileDetailCreateMutation = (options?: Partial<Options<V1ProfileProfileDetailCreateData>>): UseMutationOptions<V1ProfileProfileDetailCreateResponse, AxiosError<DefaultError>, Options<V1ProfileProfileDetailCreateData>> => {
    const mutationOptions: UseMutationOptions<V1ProfileProfileDetailCreateResponse, AxiosError<DefaultError>, Options<V1ProfileProfileDetailCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1ProfileProfileDetailCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1SearchBusinessSearchRetrieveQueryKey = (options: Options<V1SearchBusinessSearchRetrieveData>) => createQueryKey('v1SearchBusinessSearchRetrieve', options);

export const v1SearchBusinessSearchRetrieveOptions = (options: Options<V1SearchBusinessSearchRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1SearchBusinessSearchRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1SearchBusinessSearchRetrieveQueryKey(options)
    });
};

export const v1SearchNearbyRetrieveQueryKey = (options: Options<V1SearchNearbyRetrieveData>) => createQueryKey('v1SearchNearbyRetrieve', options);

export const v1SearchNearbyRetrieveOptions = (options: Options<V1SearchNearbyRetrieveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1SearchNearbyRetrieve({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1SearchNearbyRetrieveQueryKey(options)
    });
};