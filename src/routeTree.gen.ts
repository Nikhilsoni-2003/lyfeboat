/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as ServicesRouteImport } from './routes/services'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as MoreRouteImport } from './routes/more'
import { Route as LeadsRouteImport } from './routes/leads'
import { Route as NoauthRouteRouteImport } from './routes/_noauth/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NoauthLoginRouteImport } from './routes/_noauth/login'
import { Route as AuthProfileRouteImport } from './routes/_auth/profile'
import { Route as AuthFeedRouteImport } from './routes/_auth/feed'
import { Route as AuthBusinessPageRouteImport } from './routes/_auth/$businessPage'
import { Route as AuthDashboardRouteRouteImport } from './routes/_auth/dashboard/route'
import { Route as AuthDashboardIndexRouteImport } from './routes/_auth/dashboard/index'
import { Route as AuthDashboardBusinessidRouteImport } from './routes/_auth/dashboard/$businessid'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const ServicesRoute = ServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const MoreRoute = MoreRouteImport.update({
  id: '/more',
  path: '/more',
  getParentRoute: () => rootRouteImport,
} as any)
const LeadsRoute = LeadsRouteImport.update({
  id: '/leads',
  path: '/leads',
  getParentRoute: () => rootRouteImport,
} as any)
const NoauthRouteRoute = NoauthRouteRouteImport.update({
  id: '/_noauth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NoauthLoginRoute = NoauthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => NoauthRouteRoute,
} as any)
const AuthProfileRoute = AuthProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthFeedRoute = AuthFeedRouteImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthBusinessPageRoute = AuthBusinessPageRouteImport.update({
  id: '/$businessPage',
  path: '/$businessPage',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthDashboardRouteRoute = AuthDashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthDashboardIndexRoute = AuthDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthDashboardRouteRoute,
} as any)
const AuthDashboardBusinessidRoute = AuthDashboardBusinessidRouteImport.update({
  id: '/$businessid',
  path: '/$businessid',
  getParentRoute: () => AuthDashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leads': typeof LeadsRoute
  '/more': typeof MoreRoute
  '/notifications': typeof NotificationsRoute
  '/privacy': typeof PrivacyRoute
  '/services': typeof ServicesRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
  '/dashboard': typeof AuthDashboardRouteRouteWithChildren
  '/$businessPage': typeof AuthBusinessPageRoute
  '/feed': typeof AuthFeedRoute
  '/profile': typeof AuthProfileRoute
  '/login': typeof NoauthLoginRoute
  '/dashboard/$businessid': typeof AuthDashboardBusinessidRoute
  '/dashboard/': typeof AuthDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leads': typeof LeadsRoute
  '/more': typeof MoreRoute
  '/notifications': typeof NotificationsRoute
  '/privacy': typeof PrivacyRoute
  '/services': typeof ServicesRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
  '/$businessPage': typeof AuthBusinessPageRoute
  '/feed': typeof AuthFeedRoute
  '/profile': typeof AuthProfileRoute
  '/login': typeof NoauthLoginRoute
  '/dashboard/$businessid': typeof AuthDashboardBusinessidRoute
  '/dashboard': typeof AuthDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_noauth': typeof NoauthRouteRouteWithChildren
  '/leads': typeof LeadsRoute
  '/more': typeof MoreRoute
  '/notifications': typeof NotificationsRoute
  '/privacy': typeof PrivacyRoute
  '/services': typeof ServicesRoute
  '/signup': typeof SignupRoute
  '/terms': typeof TermsRoute
  '/_auth/dashboard': typeof AuthDashboardRouteRouteWithChildren
  '/_auth/$businessPage': typeof AuthBusinessPageRoute
  '/_auth/feed': typeof AuthFeedRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/_noauth/login': typeof NoauthLoginRoute
  '/_auth/dashboard/$businessid': typeof AuthDashboardBusinessidRoute
  '/_auth/dashboard/': typeof AuthDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/leads'
    | '/more'
    | '/notifications'
    | '/privacy'
    | '/services'
    | '/signup'
    | '/terms'
    | '/dashboard'
    | '/$businessPage'
    | '/feed'
    | '/profile'
    | '/login'
    | '/dashboard/$businessid'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/leads'
    | '/more'
    | '/notifications'
    | '/privacy'
    | '/services'
    | '/signup'
    | '/terms'
    | '/$businessPage'
    | '/feed'
    | '/profile'
    | '/login'
    | '/dashboard/$businessid'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_noauth'
    | '/leads'
    | '/more'
    | '/notifications'
    | '/privacy'
    | '/services'
    | '/signup'
    | '/terms'
    | '/_auth/dashboard'
    | '/_auth/$businessPage'
    | '/_auth/feed'
    | '/_auth/profile'
    | '/_noauth/login'
    | '/_auth/dashboard/$businessid'
    | '/_auth/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  NoauthRouteRoute: typeof NoauthRouteRouteWithChildren
  LeadsRoute: typeof LeadsRoute
  MoreRoute: typeof MoreRoute
  NotificationsRoute: typeof NotificationsRoute
  PrivacyRoute: typeof PrivacyRoute
  ServicesRoute: typeof ServicesRoute
  SignupRoute: typeof SignupRoute
  TermsRoute: typeof TermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/more': {
      id: '/more'
      path: '/more'
      fullPath: '/more'
      preLoaderRoute: typeof MoreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leads': {
      id: '/leads'
      path: '/leads'
      fullPath: '/leads'
      preLoaderRoute: typeof LeadsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_noauth': {
      id: '/_noauth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NoauthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_noauth/login': {
      id: '/_noauth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof NoauthLoginRouteImport
      parentRoute: typeof NoauthRouteRoute
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/feed': {
      id: '/_auth/feed'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof AuthFeedRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/$businessPage': {
      id: '/_auth/$businessPage'
      path: '/$businessPage'
      fullPath: '/$businessPage'
      preLoaderRoute: typeof AuthBusinessPageRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/dashboard/': {
      id: '/_auth/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AuthDashboardIndexRouteImport
      parentRoute: typeof AuthDashboardRouteRoute
    }
    '/_auth/dashboard/$businessid': {
      id: '/_auth/dashboard/$businessid'
      path: '/$businessid'
      fullPath: '/dashboard/$businessid'
      preLoaderRoute: typeof AuthDashboardBusinessidRouteImport
      parentRoute: typeof AuthDashboardRouteRoute
    }
  }
}

interface AuthDashboardRouteRouteChildren {
  AuthDashboardBusinessidRoute: typeof AuthDashboardBusinessidRoute
  AuthDashboardIndexRoute: typeof AuthDashboardIndexRoute
}

const AuthDashboardRouteRouteChildren: AuthDashboardRouteRouteChildren = {
  AuthDashboardBusinessidRoute: AuthDashboardBusinessidRoute,
  AuthDashboardIndexRoute: AuthDashboardIndexRoute,
}

const AuthDashboardRouteRouteWithChildren =
  AuthDashboardRouteRoute._addFileChildren(AuthDashboardRouteRouteChildren)

interface AuthRouteRouteChildren {
  AuthDashboardRouteRoute: typeof AuthDashboardRouteRouteWithChildren
  AuthBusinessPageRoute: typeof AuthBusinessPageRoute
  AuthFeedRoute: typeof AuthFeedRoute
  AuthProfileRoute: typeof AuthProfileRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthDashboardRouteRoute: AuthDashboardRouteRouteWithChildren,
  AuthBusinessPageRoute: AuthBusinessPageRoute,
  AuthFeedRoute: AuthFeedRoute,
  AuthProfileRoute: AuthProfileRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface NoauthRouteRouteChildren {
  NoauthLoginRoute: typeof NoauthLoginRoute
}

const NoauthRouteRouteChildren: NoauthRouteRouteChildren = {
  NoauthLoginRoute: NoauthLoginRoute,
}

const NoauthRouteRouteWithChildren = NoauthRouteRoute._addFileChildren(
  NoauthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  NoauthRouteRoute: NoauthRouteRouteWithChildren,
  LeadsRoute: LeadsRoute,
  MoreRoute: MoreRoute,
  NotificationsRoute: NotificationsRoute,
  PrivacyRoute: PrivacyRoute,
  ServicesRoute: ServicesRoute,
  SignupRoute: SignupRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
